# -*- coding: utf-8 -*-
from __future__ import unicode_literals

from django.db import models, migrations
import django.utils.timezone
import CNDADATA.models


class Migration(migrations.Migration):

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Doctorview',
            fields=[
                ('doctorid', models.IntegerField(serialize=False, primary_key=True)),
                ('doctorname', models.CharField(max_length=20, blank=True)),
                ('doctorsex', models.CharField(max_length=5, blank=True)),
                ('doctorage', models.IntegerField(null=True, blank=True)),
                ('professionalrands', models.CharField(max_length=100, blank=True)),
                ('doctorworktime', models.IntegerField(null=True, blank=True)),
                ('doctorsynopsis', models.CharField(max_length=1024, blank=True)),
                ('researcharea', models.CharField(max_length=1024, blank=True)),
                ('researchfindings', models.CharField(max_length=1024, blank=True)),
                ('adminisareaprovince', models.CharField(max_length=50, blank=True)),
                ('adminisareacity', models.CharField(max_length=50, blank=True)),
                ('adminisareacounty', models.CharField(max_length=50, blank=True)),
                ('doctorexptypename', models.CharField(max_length=50, blank=True)),
                ('doctorexpertisetitle', models.CharField(max_length=100, blank=True)),
                ('hospitalname', models.CharField(max_length=100, blank=True)),
                ('hospitalofficename', models.CharField(max_length=50, blank=True)),
                ('workduty', models.CharField(max_length=200, blank=True)),
            ],
            options={
                'ordering': ['doctorid'],
                'db_table': 'doctorview',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Register',
            fields=[
                ('id', models.AutoField(verbose_name='ID', serialize=False, auto_created=True, primary_key=True)),
                ('name', models.CharField(max_length=30)),
                ('gender', models.CharField(max_length=10)),
                ('country', models.CharField(max_length=20)),
                ('aboutYou', models.CharField(max_length=100)),
                ('mailinglist', models.BooleanField(default=False)),
            ],
            options={
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbAdminisarea',
            fields=[
                ('adminisareaid', models.AutoField(serialize=False, primary_key=True)),
                ('adminisareacode', models.CharField(max_length=15, blank=True)),
                ('adminisareaprovince', models.CharField(max_length=50, blank=True)),
                ('adminisareacity', models.CharField(max_length=50, blank=True)),
                ('adminisareacounty', models.CharField(max_length=50, blank=True)),
                ('adminisarearemarks', models.CharField(max_length=100, blank=True)),
            ],
            options={
                'ordering': ['adminisareaid'],
                'db_table': 'tb_adminisarea',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbAverageamountstd',
            fields=[
                ('amountstdid', models.AutoField(serialize=False, primary_key=True)),
                ('amountnumofdays', models.BigIntegerField(null=True, blank=True)),
                ('averageamountremarks', models.CharField(max_length=100, blank=True)),
                ('amountbegintime', models.TimeField(null=True, blank=True)),
                ('amountstoptime', models.TimeField(null=True, blank=True)),
            ],
            options={
                'db_table': 'tb_averageamountstd',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbCommondiseaseinfo',
            fields=[
                ('commondiseaseid', models.AutoField(serialize=False, primary_key=True)),
                ('commondiname', models.CharField(max_length=50, blank=True)),
                ('diseaseexplain', models.CharField(max_length=1024, blank=True)),
            ],
            options={
                'ordering': ['commondiseaseid'],
                'db_table': 'tb_commondiseaseinfo',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbCommondiseasetype',
            fields=[
                ('commonditypeid', models.AutoField(serialize=False, primary_key=True)),
                ('commonditypename', models.CharField(max_length=50, blank=True)),
                ('commonditypecode', models.IntegerField(null=True, blank=True)),
                ('diclassifyexplain', models.CharField(max_length=200, blank=True)),
            ],
            options={
                'ordering': ['commonditypeid'],
                'db_table': 'tb_commondiseasetype',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbCommonfoodinfo',
            fields=[
                ('commonfoodid', models.AutoField(serialize=False, primary_key=True)),
                ('commonfoodname', models.CharField(max_length=50, blank=True)),
                ('commonfoodexplain', models.CharField(max_length=1024, blank=True)),
            ],
            options={
                'ordering': ['commonfoodid'],
                'db_table': 'tb_commonfoodinfo',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbCommonfoodtype',
            fields=[
                ('commonfoodtypeid', models.AutoField(serialize=False, primary_key=True)),
                ('commonfoodtypename', models.CharField(max_length=50, blank=True)),
                ('commonfoodtypecode', models.IntegerField(null=True, blank=True)),
                ('foodtypeexplain', models.CharField(max_length=1024, blank=True)),
            ],
            options={
                'ordering': ['commonfoodtypeid'],
                'db_table': 'tb_commonfoodtype',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbCommonnutrientintake',
            fields=[
                ('nutrientid', models.AutoField(serialize=False, primary_key=True)),
                ('nutrientname', models.CharField(max_length=30, blank=True)),
                ('nutrientintakemax', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('nutrientintakemin', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('maxagefor', models.IntegerField(null=True, blank=True)),
                ('minagefor', models.IntegerField(null=True, blank=True)),
                ('nutrientintakeremarks', models.CharField(max_length=200, blank=True)),
            ],
            options={
                'ordering': ['nutrientid'],
                'db_table': 'tb_commonnutrientintake',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbConstituteidentifyresult',
            fields=[
                ('identifyresultid', models.AutoField(serialize=False, primary_key=True)),
                ('constituteidentifytime', models.DateTimeField(null=True, blank=True)),
                ('constituteidentifyremarks', models.CharField(max_length=500, blank=True)),
                ('constituteidentifyresult', models.CharField(max_length=30, blank=True)),
                ('constituteldentifyflag', models.BigIntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['identifyresultid'],
                'db_table': 'tb_constituteidentifyresult',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbCtreatmentrecords',
            fields=[
                ('tcmexaminationid', models.AutoField(serialize=False, primary_key=True)),
                ('integral_spirit', models.CharField(max_length=1024, blank=True)),
                ('integral_look', models.CharField(max_length=1024, blank=True)),
                ('integral_shape', models.CharField(max_length=1024, blank=True)),
                ('part_head', models.CharField(max_length=1024, blank=True)),
                ('part_organs', models.CharField(max_length=1024, blank=True)),
                ('part_chest', models.CharField(max_length=1024, blank=True)),
                ('part_tonguenature', models.CharField(max_length=1024, blank=True)),
                ('part_fur', models.CharField(max_length=1024, blank=True)),
                ('pulsecondition', models.CharField(max_length=1024, blank=True)),
                ('inquiry_feel', models.CharField(max_length=1024, blank=True)),
                ('inquiry_eating', models.CharField(max_length=1024, blank=True)),
                ('inquiry_habit', models.CharField(max_length=1024, blank=True)),
                ('healthcareguid', models.CharField(max_length=1024, blank=True)),
                ('examinationtime', models.DateTimeField(null=True, blank=True)),
                ('examinationlocation', models.CharField(max_length=100, blank=True)),
                ('examinationresult', models.CharField(max_length=1024, blank=True)),
                ('examinationremarks', models.CharField(max_length=500, blank=True)),
            ],
            options={
                'ordering': ['tcmexaminationid'],
                'db_table': 'tb_ctreatmentrecords',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbDataacquiretype',
            fields=[
                ('acqdatatypeid', models.AutoField(serialize=False, primary_key=True)),
                ('acqdatatypename', models.CharField(max_length=50, blank=True)),
                ('acqdatatypeexplain', models.CharField(max_length=200, blank=True)),
            ],
            options={
                'ordering': ['acqdatatypeid'],
                'db_table': 'tb_dataacquiretype',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbDataacquisition',
            fields=[
                ('acquiredataid', models.AutoField(serialize=False, primary_key=True)),
                ('acquiredataname', models.CharField(max_length=20, blank=True)),
                ('acquiredataexplain', models.CharField(max_length=200, blank=True)),
            ],
            options={
                'ordering': ['acquiredataid'],
                'db_table': 'tb_dataacquisition',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbDeviceacquiredatarecords',
            fields=[
                ('deviceacqrecordid', models.AutoField(serialize=False, primary_key=True)),
                ('deviceacqdatavalue', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
            ],
            options={
                'ordering': ['deviceacqrecordid'],
                'db_table': 'tb_deviceacquiredatarecords',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbDeviceparacode',
            fields=[
                ('deviceparacodeid', models.AutoField(serialize=False, primary_key=True)),
                ('parametercode', models.IntegerField(null=True, blank=True)),
                ('parametername', models.CharField(max_length=30, blank=True)),
                ('parametermean', models.CharField(max_length=100, blank=True)),
            ],
            options={
                'ordering': ['deviceparacodeid'],
                'db_table': 'tb_deviceparacode',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbDeviceparamapp',
            fields=[
                ('deviceparamappid', models.AutoField(serialize=False, primary_key=True)),
                ('deviceparavalue', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
            ],
            options={
                'ordering': ['deviceparamappid'],
                'db_table': 'tb_deviceparamapp',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbDiagnosistrendsrecords',
            fields=[
                ('diatrendid', models.AutoField(serialize=False, primary_key=True)),
                ('diatrendres', models.CharField(max_length=100, blank=True)),
                ('diatrendresexplain', models.CharField(max_length=200, blank=True)),
                ('diatrendtime', models.DateField(null=True, blank=True)),
                ('diatrendplace', models.CharField(max_length=100, blank=True)),
            ],
            options={
                'ordering': ['diatrendid'],
                'db_table': 'tb_diagnosistrendsrecords',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbDietaryrecords',
            fields=[
                ('eatingrecordid', models.AutoField(serialize=False, primary_key=True)),
                ('foodtypename', models.CharField(max_length=50, blank=True)),
                ('foodname', models.CharField(max_length=50, blank=True)),
                ('eatingamount', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('unitname', models.CharField(max_length=20, blank=True)),
                ('eatingtime', models.DateTimeField(null=True, blank=True)),
                ('eatingrecordsuptime', models.DateTimeField(null=True, blank=True)),
                ('eatinginforemarks', models.CharField(max_length=150, blank=True)),
                ('eatingstateback', models.CharField(max_length=200, blank=True)),
                ('intelligentdevicecode', models.IntegerField(null=True, blank=True)),
                ('eatingupflag', models.BigIntegerField(null=True, blank=True)),
                ('setmealcode', models.BigIntegerField(null=True, blank=True)),
                ('eatingovertime', models.DateTimeField(null=True, blank=True)),
            ],
            options={
                'ordering': ['eatingrecordid'],
                'db_table': 'tb_dietaryrecords',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbDoctorexpertiseinfo',
            fields=[
                ('doctorexpertiseid', models.AutoField(serialize=False, primary_key=True)),
                ('doctorexpertisetitle', models.CharField(max_length=100, blank=True)),
                ('doctorexpertiseexplain', models.CharField(max_length=1024, blank=True)),
            ],
            options={
                'ordering': ['doctorexpertiseid'],
                'db_table': 'tb_doctorexpertiseinfo',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbDoctorexpertisetype',
            fields=[
                ('doctorexptypeid', models.AutoField(serialize=False, primary_key=True)),
                ('doctorexptypename', models.CharField(max_length=50, blank=True)),
                ('doctorexptypecode', models.IntegerField(null=True, blank=True)),
                ('doctorexptypeexplain', models.CharField(max_length=1024, blank=True)),
            ],
            options={
                'ordering': ['doctorexptypeid'],
                'db_table': 'tb_doctorexpertisetype',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbEatinganalysis',
            fields=[
                ('eatinganalysisid', models.AutoField(serialize=False, primary_key=True)),
                ('energyintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('energyunit', models.CharField(max_length=10, blank=True)),
                ('moistureintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('moistureunit', models.CharField(max_length=10, blank=True)),
                ('proteinintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('proteinunit', models.CharField(max_length=10, blank=True)),
                ('fatintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('fatunit', models.CharField(max_length=10, blank=True)),
                ('fiberintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('fiberunit', models.CharField(max_length=10, blank=True)),
                ('carbohydrateintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('carbohydrateunit', models.CharField(max_length=10, blank=True)),
                ('vitaminaintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('vitaminaunit', models.CharField(max_length=10, blank=True)),
                ('vitaminb1intake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('vitaminb1unit', models.CharField(max_length=10, blank=True)),
                ('vitaminb2intake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('vitaminb2unit', models.CharField(max_length=10, blank=True)),
                ('vitaminb6intake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('vitaminb6unit', models.CharField(max_length=10, blank=True)),
                ('vitaminb12intake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('vitaminb12unit', models.CharField(max_length=10, blank=True)),
                ('vitamincintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('vitamincunit', models.CharField(max_length=10, blank=True)),
                ('vitamindintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('vitamindunit', models.CharField(max_length=10, blank=True)),
                ('vitamineintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('vitamineunit', models.CharField(max_length=10, blank=True)),
                ('vitaminkintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('vitaminkunit', models.CharField(max_length=10, blank=True)),
                ('nicotinicacidintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('nicotinicacidunit', models.CharField(max_length=10, blank=True)),
                ('folateintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('folateunit', models.CharField(max_length=10, blank=True)),
                ('sodiumintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('sodiumunit', models.CharField(max_length=10, blank=True)),
                ('calciumintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('calciumunit', models.CharField(max_length=10, blank=True)),
                ('ironintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('ironunit', models.CharField(max_length=10, blank=True)),
                ('potassiumintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('potassiumunit', models.CharField(max_length=10, blank=True)),
                ('zincintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('zincunit', models.CharField(max_length=10, blank=True)),
                ('magnesiumintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('magnesiumunit', models.CharField(max_length=10, blank=True)),
                ('copperintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('copperunit', models.CharField(max_length=10, blank=True)),
                ('chomuimintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('chomuimunit', models.CharField(max_length=10, blank=True)),
                ('mangaesiumintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('mangaesiumunit', models.CharField(max_length=10, blank=True)),
                ('molybdenumintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('molybdenumunit', models.CharField(max_length=10, blank=True)),
                ('iodineintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('iodineunit', models.CharField(max_length=10, blank=True)),
                ('phosphrusintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('phosphrusunit', models.CharField(max_length=10, blank=True)),
                ('seleniumintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('seleniumunit', models.CharField(max_length=10, blank=True)),
                ('fluorineintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('fluorineunit', models.CharField(max_length=10, blank=True)),
                ('cholesterolintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('cholesterolunit', models.CharField(max_length=10, blank=True)),
                ('saturatedintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('saturatedunit', models.CharField(max_length=10, blank=True)),
                ('acidregurgitationintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('acidregurgitationunit', models.CharField(max_length=10, blank=True)),
                ('biotinintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('biotinunit', models.CharField(max_length=10, blank=True)),
                ('cholineintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('cholineunit', models.CharField(max_length=10, blank=True)),
                ('caroteneintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('caroteneunit', models.CharField(max_length=10, blank=True)),
            ],
            options={
                'ordering': ['eatinganalysisid'],
                'db_table': 'tb_eatinganalysis',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbEatingpreferrecords',
            fields=[
                ('eatingpreferid', models.AutoField(serialize=False, primary_key=True)),
                ('foodtypename', models.CharField(max_length=50, blank=True)),
                ('foodname', models.CharField(max_length=50, blank=True)),
                ('preference', models.DecimalField(null=True, max_digits=4, decimal_places=2, blank=True)),
                ('averageintake', models.DecimalField(null=True, max_digits=4, decimal_places=1, blank=True)),
                ('eatingoftenstarttime', models.TimeField(null=True, blank=True)),
                ('eatingoftenovertime', models.TimeField(null=True, blank=True)),
                ('additemtime', models.DateTimeField(null=True, blank=True)),
                ('currentlypreferflag', models.SmallIntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['eatingpreferid'],
                'db_table': 'tb_eatingpreferrecords',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbEatingsetmealinfo',
            fields=[
                ('setmealinfoid', models.AutoField(serialize=False, primary_key=True)),
                ('foodtypecontent', models.IntegerField(null=True, blank=True)),
                ('setmealname', models.CharField(max_length=50, blank=True)),
                ('setmealexplain', models.CharField(max_length=1024, blank=True)),
                ('setmealremarks', models.CharField(max_length=100, blank=True)),
                ('setmealcode', models.CharField(max_length=100, blank=True)),
            ],
            options={
                'ordering': ['setmealinfoid'],
                'db_table': 'tb_eatingsetmealinfo',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbExerciseinfo',
            fields=[
                ('exerciseid', models.AutoField(serialize=False, primary_key=True)),
                ('exercisename', models.CharField(max_length=20, blank=True)),
                ('exercisetypename', models.CharField(max_length=20, blank=True)),
                ('energywaste', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('exercisetip', models.CharField(max_length=1024, blank=True)),
                ('exerciseaffect', models.CharField(max_length=1024, blank=True)),
            ],
            options={
                'ordering': ['exerciseid'],
                'db_table': 'tb_exerciseinfo',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbExercisepreferrecords',
            fields=[
                ('exercisepreferenceid', models.AutoField(serialize=False, primary_key=True)),
                ('exercisetype', models.CharField(max_length=20, blank=True)),
                ('exercisename', models.CharField(max_length=20, blank=True)),
                ('exercisedescribe', models.CharField(max_length=200, blank=True)),
                ('additemtime', models.DateTimeField(null=True, blank=True)),
                ('currentlypreferflag', models.BigIntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['exercisepreferenceid'],
                'db_table': 'tb_exercisepreferrecords',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbExercisetype',
            fields=[
                ('exercisetypeid', models.AutoField(serialize=False, primary_key=True)),
                ('exercisetypename', models.CharField(max_length=100, blank=True)),
                ('exercisetypeexplain', models.CharField(max_length=1024, blank=True)),
                ('exercisetypecode', models.IntegerField(null=True, blank=True)),
                ('exercisetyperemarks', models.CharField(max_length=1024, blank=True)),
            ],
            options={
                'ordering': ['exercisetypeid'],
                'db_table': 'tb_exercisetype',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbExpendedhealthproperties',
            fields=[
                ('exphealthpropertyid', models.AutoField(serialize=False, primary_key=True)),
                ('healthpropertyname', models.CharField(max_length=20, blank=True)),
                ('healthpropertyexplain', models.CharField(max_length=500, blank=True)),
                ('healthpropertycode', models.IntegerField(null=True, blank=True)),
                ('healthpropertyremarks', models.CharField(max_length=500, blank=True)),
            ],
            options={
                'ordering': ['exphealthpropertyid'],
                'db_table': 'tb_expendedhealthproperties',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbExpertcollect',
            fields=[
                ('expertcollectid', models.AutoField(serialize=False, primary_key=True)),
                ('collectiontime', models.DateTimeField(null=True, blank=True)),
                ('collectionremarks', models.CharField(max_length=1024, blank=True)),
                ('collectionstatusflag', models.SmallIntegerField(null=True, blank=True)),
                ('collectioncontentsnapshot', models.CharField(max_length=500, blank=True)),
            ],
            options={
                'ordering': ['expertcollectid'],
                'db_table': 'tb_expertcollect',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbFoodfeature',
            fields=[
                ('eatingfeatureid', models.AutoField(serialize=False, primary_key=True)),
                ('eatinghabitsdetermine', models.CharField(max_length=10, blank=True)),
                ('eatinghabitanalysis', models.CharField(max_length=500, blank=True)),
                ('averageenergyintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('energyintakeunit', models.CharField(max_length=10, blank=True)),
                ('averagemoistureintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('moistureintakeunit', models.CharField(max_length=10, blank=True)),
                ('averageproteinintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('proteinintakeunit', models.CharField(max_length=10, blank=True)),
                ('averagefatintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('fatintakeunit', models.CharField(max_length=10, blank=True)),
                ('averagefiberintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('fiberintakeunit', models.CharField(max_length=10, blank=True)),
                ('averagecarbohydrateintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('carbohydrateintakeunit', models.CharField(max_length=10, blank=True)),
                ('averagevitaminaintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('vitaminaintakeunit', models.CharField(max_length=10, blank=True)),
                ('averagevitaminb1intake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('vitaminb1intakeunit', models.CharField(max_length=10, blank=True)),
                ('averagevitaminb2intake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('vitaminb2intakeunit', models.CharField(max_length=10, blank=True)),
                ('averagevitaminb6intake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('vitaminb6intakeunit', models.CharField(max_length=10, blank=True)),
                ('averagevitaminb12intake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('vitaminb12intakeunit', models.CharField(max_length=10, blank=True)),
                ('averagevitamincintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('vitamincintakeunit', models.CharField(max_length=10, blank=True)),
                ('averagevitamindintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('vitamindintakeunit', models.CharField(max_length=10, blank=True)),
                ('averagevitamineintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('vitamineintakeunit', models.CharField(max_length=10, blank=True)),
                ('averagevitaminkintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('vitaminkintakeunit', models.CharField(max_length=10, blank=True)),
                ('averagenicotinicacidintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('nicotinicacidintakeunit', models.CharField(max_length=10, blank=True)),
                ('averagefolateintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('folateintakeunit', models.CharField(max_length=10, blank=True)),
                ('averagesodiumintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('sodiumintakeunit', models.CharField(max_length=10, blank=True)),
                ('averagecalciumintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('calciumintakeunit', models.CharField(max_length=10, blank=True)),
                ('averageironintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('ironintakeunit', models.CharField(max_length=10, blank=True)),
                ('averagepotassiumintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('potassiumintakeunit', models.CharField(max_length=10, blank=True)),
                ('averagezincintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('zincintakeunit', models.CharField(max_length=10, blank=True)),
                ('averagemagnesiumintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('magnesiumintakeunit', models.CharField(max_length=10, blank=True)),
                ('averagecopperintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('copperintakeunit', models.CharField(max_length=10, blank=True)),
                ('averagechomuimintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('chomuimintakeunit', models.CharField(max_length=10, blank=True)),
                ('averagemangaesiumintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('mangaesiumintakeunit', models.CharField(max_length=10, blank=True)),
                ('averagemolybdenumintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('molybdenumintakeunit', models.CharField(max_length=10, blank=True)),
                ('averageiodineintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('iodineintakeunit', models.CharField(max_length=10, blank=True)),
                ('averagephosphrusintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('phosphrusintakeunit', models.CharField(max_length=10, blank=True)),
                ('averageseleniumintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('seleniumintakeunit', models.CharField(max_length=10, blank=True)),
                ('averagefluorineintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('fluorineintakeunit', models.CharField(max_length=10, blank=True)),
                ('averagecholesterolintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('cholesterolintakeunit', models.CharField(max_length=10, blank=True)),
                ('averagesaturatedintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('saturatedintakeunit', models.CharField(max_length=10, blank=True)),
                ('averageacidregurgitationintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('acidregurgitationintakeunit', models.CharField(max_length=10, blank=True)),
                ('averagebiotinintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('biotinintakeunit', models.CharField(max_length=10, blank=True)),
                ('averagecholineintake', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('cholineintakeunit', models.CharField(max_length=10, blank=True)),
                ('latelymaintentime', models.DateTimeField(null=True, blank=True)),
            ],
            options={
                'ordering': ['eatingfeatureid'],
                'db_table': 'tb_foodfeature',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbFoodmedicinaleffecttype',
            fields=[
                ('medicinaleffecttypeid', models.AutoField(serialize=False, primary_key=True)),
                ('medicinaleffecttypename', models.CharField(max_length=100, blank=True)),
                ('medicinaleffecttypecode', models.IntegerField(null=True, blank=True)),
                ('medicinaleffecttypeexp', models.CharField(max_length=500, blank=True)),
            ],
            options={
                'ordering': ['medicinaleffecttypeid'],
                'db_table': 'tb_foodmedicinaleffecttype',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbFoodmedicinalprop',
            fields=[
                ('foodmedicinalpropid', models.AutoField(serialize=False, primary_key=True)),
                ('medicineproperty', models.CharField(max_length=50, blank=True)),
                ('medicineflavor', models.CharField(max_length=50, blank=True)),
                ('medicineeffect', models.CharField(max_length=1024, blank=True)),
                ('medicinepropremarks', models.CharField(max_length=1024, blank=True)),
            ],
            options={
                'ordering': ['foodmedicinalpropid'],
                'db_table': 'tb_foodmedicinalprop',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbFoodmedicinalpropmapp',
            fields=[
                ('foodmedicinalpropmappid', models.IntegerField(serialize=False, primary_key=True)),
                ('foodmedicinalpropmappexp', models.CharField(max_length=1024, blank=True)),
            ],
            options={
                'ordering': ['foodmedicinalpropmappid'],
                'db_table': 'tb_foodmedicinalpropmapp',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbFoodnutritioncontent',
            fields=[
                ('foodnutritionid', models.AutoField(serialize=False, primary_key=True)),
                ('foodenergy', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('energyunit', models.CharField(max_length=10, blank=True)),
                ('foodmoisture', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('moistureyunit', models.CharField(max_length=10, blank=True)),
                ('proteincontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('proteinyunit', models.CharField(max_length=10, blank=True)),
                ('fatcontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('fatyunit', models.CharField(max_length=10, blank=True)),
                ('fibercontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('fiberyunit', models.CharField(max_length=10, blank=True)),
                ('carbohydratecontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('carbohydrateyunit', models.CharField(max_length=10, blank=True)),
                ('vitaminacontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('vitaminaunit', models.CharField(max_length=10, blank=True)),
                ('vitaminb1content', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('vitaminb1unit', models.CharField(max_length=10, blank=True)),
                ('vitaminb2content', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('vitaminb2unit', models.CharField(max_length=10, blank=True)),
                ('vitaminb6content', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('vitaminb6unit', models.CharField(max_length=10, blank=True)),
                ('vitaminb12content', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('vitaminb12unit', models.CharField(max_length=10, blank=True)),
                ('vitaminccontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('vitamincunit', models.CharField(max_length=10, blank=True)),
                ('vitamindcontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('vitamindunit', models.CharField(max_length=10, blank=True)),
                ('vitaminecontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('vitamineunit', models.CharField(max_length=10, blank=True)),
                ('vitaminkcontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('vitaminkunit', models.CharField(max_length=10, blank=True)),
                ('nicotinicacidcontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('nicotinicacidunit', models.CharField(max_length=10, blank=True)),
                ('folatecontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('folateunit', models.CharField(max_length=10, blank=True)),
                ('sodiumcontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('sodiumunit', models.CharField(max_length=10, blank=True)),
                ('calciumcontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('calciumunit', models.CharField(max_length=10, blank=True)),
                ('ironcontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('ironunit', models.CharField(max_length=10, blank=True)),
                ('potassiumcontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('potassiumunit', models.CharField(max_length=10, blank=True)),
                ('zinccontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('zincunit', models.CharField(max_length=10, blank=True)),
                ('magnesiumcontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('magnesiumunit', models.CharField(max_length=10, blank=True)),
                ('coppercontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('copperunit', models.CharField(max_length=10, blank=True)),
                ('chromiumcontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('chromiumunit', models.CharField(max_length=10, blank=True)),
                ('mangaesscontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('mangaessunit', models.CharField(max_length=10, blank=True)),
                ('molybdenumcontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('molybdenumunit', models.CharField(max_length=10, blank=True)),
                ('iodinecontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('iodineunit', models.CharField(max_length=10, blank=True)),
                ('phosphruscontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('phosphrusunit', models.CharField(max_length=10, blank=True)),
                ('seleniumcontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('seleniumunit', models.CharField(max_length=10, blank=True)),
                ('fluorinecontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('fluorineunit', models.CharField(max_length=10, blank=True)),
                ('cholesterolcontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('cholesterounit', models.CharField(max_length=10, blank=True)),
                ('saturatedfattyacidcontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('saturatedfattyacidunit', models.CharField(max_length=10, blank=True)),
                ('acidregurgitationcontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('acidregurgitationunit', models.CharField(max_length=10, blank=True)),
                ('biotincontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('biotinunit', models.CharField(max_length=10, blank=True)),
                ('cholinecontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('cholineunit', models.CharField(max_length=10, blank=True)),
                ('carotenecontent', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('caroteneunit', models.CharField(max_length=10, blank=True)),
                ('edibleparts', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['foodnutritionid'],
                'db_table': 'tb_foodnutritioncontent',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbFoodnutritionelement',
            fields=[
                ('elementid', models.AutoField(serialize=False, primary_key=True)),
                ('elementzh', models.CharField(max_length=20, blank=True)),
                ('elementen', models.CharField(max_length=20, blank=True)),
            ],
            options={
                'ordering': ['elementid'],
                'db_table': 'tb_foodnutritionelement',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbFoodwidecategories',
            fields=[
                ('foodwidecategoryid', models.IntegerField(serialize=False, primary_key=True)),
                ('foodwidecatename', models.CharField(max_length=50, blank=True)),
                ('foodwidecatecode', models.IntegerField(null=True, blank=True)),
                ('foodwidecateexplain', models.CharField(max_length=500, blank=True)),
            ],
            options={
                'ordering': ['foodwidecategoryid'],
                'db_table': 'tb_foodwidecategories',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbHealthindicatorinfo',
            fields=[
                ('healthindicatorid', models.AutoField(serialize=False, primary_key=True)),
                ('healthindicatorname', models.CharField(max_length=50, blank=True)),
                ('healthindicatorvalue', models.DecimalField(null=True, max_digits=4, decimal_places=1, blank=True)),
                ('healthindicatorchange', models.CharField(max_length=100, blank=True)),
                ('indicatorchangeexplain', models.CharField(max_length=200, blank=True)),
            ],
            options={
                'ordering': ['healthindicatorid'],
                'db_table': 'tb_healthindicatorinfo',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbHealthknowledgecollection',
            fields=[
                ('healthknowledgecollid', models.AutoField(serialize=False, primary_key=True)),
                ('collectiontime', models.DateTimeField(null=True, blank=True)),
                ('collectionremarks', models.CharField(max_length=1024, blank=True)),
                ('collectionstatusflag', models.SmallIntegerField(null=True, blank=True)),
                ('collectioncontentsnapshot', models.CharField(max_length=500, blank=True)),
            ],
            options={
                'ordering': ['healthknowledgecollid'],
                'db_table': 'tb_healthknowledgecollection',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbHealthknowledgelimited',
            fields=[
                ('healthknowllimitedid', models.AutoField(serialize=False, primary_key=True)),
                ('healthknowllimitedattname', models.CharField(max_length=50, blank=True)),
                ('healthknowllimitedstatus', models.SmallIntegerField(null=True, blank=True)),
                ('healthknowllimitedstatuslevel', models.SmallIntegerField(null=True, blank=True)),
                ('healthknowllimitedexp', models.CharField(max_length=200, blank=True)),
                ('healthknowllimitedremarks', models.CharField(max_length=200, blank=True)),
                ('healthknowllimitedvalue', models.CharField(max_length=100, blank=True)),
            ],
            options={
                'ordering': ['healthknowllimitedid'],
                'db_table': 'tb_healthknowledgelimited',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbHealthknowledgetype',
            fields=[
                ('healthknowltypeid', models.AutoField(serialize=False, primary_key=True)),
                ('healthknowltypename', models.CharField(max_length=50, blank=True)),
                ('healthknowltypecode', models.IntegerField(null=True, blank=True)),
                ('healthknowltypeexp', models.CharField(max_length=200, blank=True)),
                ('healthknowltyperemarks', models.CharField(max_length=200, blank=True)),
            ],
            options={
                'ordering': ['healthknowltypeid'],
                'db_table': 'tb_healthknowledgetype',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbHealthrecommendscollection',
            fields=[
                ('healthrecommendscolid', models.AutoField(serialize=False, primary_key=True)),
                ('collectiontime', models.DateTimeField(null=True, blank=True)),
                ('collectionremarks', models.CharField(max_length=1024, blank=True)),
                ('collectionstatusflag', models.SmallIntegerField(null=True, blank=True)),
                ('collectioncontentsnapshot', models.CharField(max_length=500, blank=True)),
            ],
            options={
                'ordering': ['healthrecommendscolid'],
                'db_table': 'tb_healthrecommendscollection',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbHealthsuggestions',
            fields=[
                ('healthsuggestid', models.AutoField(serialize=False, primary_key=True)),
                ('healthsuggestcontent', models.CharField(max_length=1024, blank=True)),
                ('healthsuggesttitle', models.CharField(max_length=100, blank=True)),
                ('healthsuggestremarks', models.CharField(max_length=1024, blank=True)),
                ('healthsuggestflag', models.IntegerField(null=True, blank=True)),
                ('healthsuggestcode', models.BigIntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['healthsuggestid'],
                'db_table': 'tb_healthsuggestions',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbHealthsuggestionsmapp',
            fields=[
                ('healthsuggestmappid', models.AutoField(serialize=False, primary_key=True)),
                ('healthsuggcontent', models.CharField(max_length=1024, blank=True)),
                ('healthsuggestreason', models.CharField(max_length=500, blank=True)),
                ('healthsuggesttime', models.DateTimeField(null=True, blank=True)),
                ('healthsuggestremarks', models.CharField(max_length=500, blank=True)),
                ('checktosee', models.SmallIntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['-healthsuggesttime'],
                'db_table': 'tb_healthsuggestionsmapp',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbHealthsuggestlimited',
            fields=[
                ('healthsuggestlimitedid', models.AutoField(serialize=False, primary_key=True)),
                ('suggestlimitedattrname', models.CharField(max_length=50, blank=True)),
                ('suggestlimitedstatus', models.SmallIntegerField(null=True, blank=True)),
                ('suggestlimitedstatuslevel', models.SmallIntegerField(null=True, blank=True)),
                ('suggestlimitedexplain', models.CharField(max_length=200, blank=True)),
                ('suggestlimitedremarks', models.CharField(max_length=200, blank=True)),
                ('suggestlimitedvalue', models.CharField(max_length=100, blank=True)),
            ],
            options={
                'ordering': ['healthsuggestlimitedid'],
                'db_table': 'tb_healthsuggestlimited',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbHealthsuggtype',
            fields=[
                ('healthsuggtypeid', models.AutoField(serialize=False, primary_key=True)),
                ('healthsuggtypename', models.CharField(max_length=50, blank=True)),
                ('healthsuggtypecode', models.IntegerField(null=True, blank=True)),
                ('suggclassifyexpla', models.CharField(max_length=200, blank=True)),
                ('healthsuggtyperemarks', models.CharField(max_length=200, blank=True)),
            ],
            options={
                'ordering': ['healthsuggtypeid'],
                'db_table': 'tb_healthsuggtype',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbHealthtrendrecords',
            fields=[
                ('healthtrendid', models.AutoField(serialize=False, primary_key=True)),
                ('heaanalysistitle', models.CharField(max_length=200, blank=True)),
                ('healthanalysistime', models.DateTimeField(null=True, blank=True)),
                ('healthtrendanalysiresult', models.CharField(max_length=1024, blank=True)),
                ('healthtrendanalysisremarks', models.CharField(max_length=1024, blank=True)),
            ],
            options={
                'ordering': ['healthtrendid'],
                'db_table': 'tb_healthtrendrecords',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbHealthwarningmess',
            fields=[
                ('healthwarningmessid', models.AutoField(serialize=False, primary_key=True)),
                ('healthwarningtitle', models.CharField(max_length=100, blank=True)),
                ('healthwarningcontent', models.CharField(max_length=1024, blank=True)),
                ('healthwarningremarks', models.CharField(max_length=200, blank=True)),
            ],
            options={
                'ordering': ['healthwarningmessid'],
                'db_table': 'tb_healthwarningmess',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbHealthwarningtype',
            fields=[
                ('healthwarningtypeid', models.AutoField(serialize=False, primary_key=True)),
                ('healthwarningname', models.CharField(max_length=100, blank=True)),
                ('healthwarningtypecode', models.IntegerField(null=True, blank=True)),
                ('healthwarningtypeexp', models.CharField(max_length=200, blank=True)),
                ('healthwarningtyperemarks', models.CharField(max_length=200, blank=True)),
            ],
            options={
                'ordering': ['healthwarningtypeid'],
                'db_table': 'tb_healthwarningtype',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbHospitaldoctorrel',
            fields=[
                ('hospitaldocrelid', models.AutoField(serialize=False, primary_key=True)),
                ('workduty', models.CharField(max_length=200, blank=True)),
            ],
            options={
                'ordering': ['hospitaldocrelid'],
                'db_table': 'tb_hospitaldoctorrel',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbHospitalinfo',
            fields=[
                ('hospitalid', models.AutoField(serialize=False, primary_key=True)),
                ('hospitalname', models.CharField(max_length=100, blank=True)),
                ('hospitalexplain', models.CharField(max_length=1024, blank=True)),
                ('hospitalrank', models.CharField(max_length=100, blank=True)),
            ],
            options={
                'ordering': ['hospitalid'],
                'db_table': 'tb_hospitalinfo',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbHospitalofficesinfo',
            fields=[
                ('hospitalofficeid', models.AutoField(serialize=False, primary_key=True)),
                ('hospitalofficename', models.CharField(max_length=50, blank=True)),
                ('hospitalofficeexplain', models.CharField(max_length=1024, blank=True)),
            ],
            options={
                'ordering': ['hospitalofficeid'],
                'db_table': 'tb_hospitalofficesinfo',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbIdentificationissuess',
            fields=[
                ('identifyissueid', models.AutoField(serialize=False, primary_key=True)),
                ('identifyissuecontent', models.CharField(max_length=200, blank=True)),
                ('identifyissueremarks', models.CharField(max_length=100, blank=True)),
            ],
            options={
                'ordering': ['identifyissueid'],
                'db_table': 'tb_identificationissuess',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbIdentifychoices',
            fields=[
                ('identifychoiceid', models.AutoField(serialize=False, primary_key=True)),
                ('identifychoicevalue', models.IntegerField(null=True, blank=True)),
                ('scriptdescribe', models.CharField(max_length=20, blank=True)),
            ],
            options={
                'ordering': ['identifychoiceid'],
                'db_table': 'tb_identifychoices',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbIdentifydiseaserel',
            fields=[
                ('identifydirelid', models.AutoField(serialize=False, primary_key=True)),
                ('identifydirelexplain', models.CharField(max_length=1024, blank=True)),
            ],
            options={
                'ordering': ['identifydirelid'],
                'db_table': 'tb_identifydiseaserel',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbIndicatorusermapp',
            fields=[
                ('indicatorusermappid', models.AutoField(serialize=False, primary_key=True)),
                ('userindicatorvalue', models.CharField(max_length=50, blank=True)),
                ('userindicatorexp', models.CharField(max_length=200, blank=True)),
                ('userindicatorremarks', models.CharField(max_length=200, blank=True)),
            ],
            options={
                'ordering': ['indicatorusermappid'],
                'db_table': 'tb_indicatorusermapp',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbIntelligentdeviceinfo',
            fields=[
                ('intelligentdeviceid', models.AutoField(serialize=False, primary_key=True)),
                ('intelligentdevicetype', models.CharField(max_length=50, blank=True)),
                ('intelligentdevicename', models.CharField(max_length=50, blank=True)),
                ('intelligentdeviceweight', models.DecimalField(null=True, max_digits=4, decimal_places=1, blank=True)),
                ('intelligentdevicecolor', models.CharField(max_length=10, blank=True)),
                ('intelligentdevicefunction', models.CharField(max_length=200, blank=True)),
                ('intelligentdevicecode', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['intelligentdeviceid'],
                'db_table': 'tb_intelligentdeviceinfo',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbLocationinfo',
            fields=[
                ('locationinfoid', models.AutoField(serialize=False, primary_key=True)),
                ('locationlongitude', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('locationlatitude', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('reallocation', models.CharField(max_length=200, blank=True)),
                ('locationremarks', models.CharField(max_length=200, blank=True)),
                ('locationprovince', models.CharField(max_length=50, blank=True)),
                ('locationcity', models.CharField(max_length=50, blank=True)),
                ('locationclassify', models.CharField(max_length=50, blank=True)),
                ('locationcounty', models.CharField(max_length=50, blank=True)),
            ],
            options={
                'ordering': ['locationinfoid'],
                'db_table': 'tb_locationinfo',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbManager',
            fields=[
                ('managerid', models.AutoField(serialize=False, primary_key=True)),
                ('managername', models.CharField(max_length=30, blank=True)),
                ('managerpassword', models.CharField(max_length=50, blank=True)),
                ('managerunit', models.CharField(max_length=50, blank=True)),
            ],
            options={
                'ordering': ['managerid'],
                'db_table': 'tb_manager',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbMeasurementunit',
            fields=[
                ('unitattributeid', models.AutoField(serialize=False, primary_key=True)),
                ('unitattributename', models.CharField(max_length=20, blank=True)),
                ('unitlevel', models.IntegerField(null=True, blank=True)),
                ('unitname', models.CharField(max_length=20, blank=True)),
                ('hexadecimal', models.IntegerField(null=True, blank=True)),
                ('unitremarks', models.CharField(max_length=100, blank=True)),
            ],
            options={
                'ordering': ['unitattributeid'],
                'db_table': 'tb_measurementunit',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbMedicalhistoryrecords',
            fields=[
                ('medicalhistoryrecordid', models.AutoField(serialize=False, primary_key=True)),
                ('diseasetype', models.CharField(max_length=100, blank=True)),
                ('diseasename', models.CharField(max_length=100, blank=True)),
                ('diseaseseverity', models.CharField(max_length=100, blank=True)),
                ('treatmentinfo', models.CharField(max_length=1024, blank=True)),
                ('treatmentdoctor', models.CharField(max_length=50, blank=True)),
                ('treatmentunit', models.CharField(max_length=100, blank=True)),
                ('treatmentlocation', models.CharField(max_length=100, blank=True)),
                ('treatmentresult', models.CharField(max_length=1024, blank=True)),
                ('recoverydegree', models.CharField(max_length=1024, blank=True)),
                ('treatmenttime', models.DateTimeField(null=True, blank=True)),
                ('treatmentremarks', models.CharField(max_length=1024, blank=True)),
            ],
            options={
                'ordering': ['medicalhistoryrecordid'],
                'db_table': 'tb_medicalhistoryrecords',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbMedicineinfo',
            fields=[
                ('chinesemedicineid', models.AutoField(serialize=False, primary_key=True)),
                ('medicinename', models.CharField(max_length=50, blank=True)),
                ('medicinegeneraltype', models.CharField(max_length=50, blank=True)),
                ('medicinesubtype', models.CharField(max_length=50, blank=True)),
                ('medicinetoxicity', models.CharField(max_length=50, blank=True)),
                ('medicineproperty', models.CharField(max_length=100, blank=True)),
                ('medicinetaste', models.CharField(max_length=50, blank=True)),
                ('indicationsfunction', models.CharField(max_length=1024, blank=True)),
                ('channeltropism', models.CharField(max_length=1024, blank=True)),
                ('clinicalapplication', models.CharField(max_length=1024, blank=True)),
                ('medicinegenera', models.CharField(max_length=1024, blank=True)),
                ('prescriptionname', models.CharField(max_length=1024, blank=True)),
                ('generaldosage', models.CharField(max_length=1024, blank=True)),
                ('generalusage', models.CharField(max_length=1024, blank=True)),
                ('withmedicine', models.CharField(max_length=1024, blank=True)),
                ('comment', models.CharField(max_length=1024, blank=True)),
                ('prescriptionsexample', models.CharField(max_length=1024, blank=True)),
                ('medicineremarks', models.CharField(max_length=1024, blank=True)),
                ('medicinecode', models.BigIntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['chinesemedicineid'],
                'db_table': 'tb_medicineinfo',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbMedicineprescription',
            fields=[
                ('medicineprescriptionid', models.AutoField(serialize=False, primary_key=True)),
                ('medicineprescriptionname', models.CharField(max_length=50, blank=True)),
                ('prescriptionindications', models.CharField(max_length=200, blank=True)),
                ('prescriptionusage', models.CharField(max_length=100, blank=True)),
                ('prescriptionmethod', models.CharField(max_length=100, blank=True)),
                ('prescriptioncharacters', models.CharField(max_length=100, blank=True)),
                ('prescriptionspecification', models.CharField(max_length=100, blank=True)),
                ('prescriptionstore', models.CharField(max_length=50, blank=True)),
                ('prescriptioncontraindicat', models.CharField(max_length=200, blank=True)),
                ('prescriptiontheories', models.CharField(max_length=500, blank=True)),
                ('prescriptionextract', models.CharField(max_length=500, blank=True)),
                ('prescriptionremarks', models.CharField(max_length=500, blank=True)),
                ('prescriptiontag', models.CharField(max_length=50, blank=True)),
            ],
            options={
                'ordering': ['medicineprescriptionid'],
                'db_table': 'tb_medicineprescription',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbMedicineprescriptionmapp',
            fields=[
                ('medprescriptmappid', models.AutoField(serialize=False, primary_key=True)),
                ('medicineamount', models.CharField(max_length=30, blank=True)),
                ('medprescriptmappremarks', models.CharField(max_length=200, blank=True)),
            ],
            options={
                'ordering': ['medprescriptmappid'],
                'db_table': 'tb_medicineprescriptionmapp',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbMedicineuseinfo',
            fields=[
                ('medicineuseinfoid', models.AutoField(serialize=False, primary_key=True)),
                ('medicineusetype', models.CharField(max_length=100, blank=True)),
                ('medicineusename', models.CharField(max_length=50, blank=True)),
                ('medicineusedose', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('medicineuseremarks', models.CharField(max_length=1024, blank=True)),
                ('prescriptiontag', models.CharField(max_length=50, blank=True)),
            ],
            options={
                'ordering': ['medicineuseinfoid'],
                'db_table': 'tb_medicineuseinfo',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbMovementdetailrecords',
            fields=[
                ('movementdetailid', models.AutoField(serialize=False, primary_key=True)),
                ('movementstarttime', models.DateTimeField(null=True, blank=True)),
                ('movementstoptime', models.DateTimeField(null=True, blank=True)),
                ('movementdetailremarks', models.CharField(max_length=500, blank=True)),
            ],
            options={
                'ordering': ['movementdetailid'],
                'db_table': 'tb_movementdetailrecords',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbMycollection',
            fields=[
                ('mycollectionid', models.AutoField(serialize=False, primary_key=True)),
                ('collectionclass', models.CharField(max_length=50, blank=True)),
                ('collectioncode', models.BigIntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['mycollectionid'],
                'db_table': 'tb_mycollection',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbPhoneappinfo',
            fields=[
                ('appinfoid', models.AutoField(serialize=False, primary_key=True)),
                ('apptype', models.CharField(max_length=20, blank=True)),
                ('appname', models.CharField(max_length=30, blank=True)),
                ('apptag', models.CharField(max_length=50, blank=True)),
                ('appotherinfo', models.CharField(max_length=20, blank=True)),
            ],
            options={
                'ordering': ['appinfoid'],
                'db_table': 'tb_phoneappinfo',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbPhoneinfo',
            fields=[
                ('phoneinfoid', models.AutoField(serialize=False, primary_key=True)),
                ('phoneuniqunum', models.CharField(max_length=100, blank=True)),
                ('phonenum', models.CharField(max_length=30, blank=True)),
            ],
            options={
                'ordering': ['phoneinfoid'],
                'db_table': 'tb_phoneinfo',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbPhonemonitorrecords',
            fields=[
                ('phoneappmonitorrecordid', models.AutoField(serialize=False, primary_key=True)),
                ('appopentime', models.DateTimeField(null=True, blank=True)),
                ('appclosetime', models.DateTimeField(null=True, blank=True)),
                ('appusetime', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('recordproducttime', models.DateTimeField(null=True, blank=True)),
            ],
            options={
                'ordering': ['phoneappmonitorrecordid'],
                'db_table': 'tb_phonemonitorrecords',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbPhonepreferuserecords',
            fields=[
                ('phonepreferuseid', models.AutoField(serialize=False, primary_key=True)),
                ('oftenusebeginat', models.TimeField(null=True, blank=True)),
                ('oftenuseovertime', models.TimeField(null=True, blank=True)),
                ('additemtime', models.DateTimeField(null=True, blank=True)),
                ('currentlypreferflag', models.BigIntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['phonepreferuseid'],
                'db_table': 'tb_phonepreferuserecords',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbPhysiqueinfo',
            fields=[
                ('physiqueinfoid', models.AutoField(serialize=False, primary_key=True)),
                ('tablescoreheight', models.DecimalField(null=True, max_digits=4, decimal_places=1, blank=True)),
                ('tablescorelow', models.DecimalField(null=True, max_digits=4, decimal_places=1, blank=True)),
                ('switchscoreheight', models.DecimalField(null=True, max_digits=4, decimal_places=1, blank=True)),
                ('switchscorelow', models.DecimalField(null=True, max_digits=4, decimal_places=1, blank=True)),
                ('generacharacter', models.CharField(max_length=1024, blank=True)),
                ('shapefeature', models.CharField(max_length=1024, blank=True)),
                ('commonmanifest', models.CharField(max_length=1024, blank=True)),
                ('mentalcharacter', models.CharField(max_length=1024, blank=True)),
                ('incidencetendency', models.CharField(max_length=1024, blank=True)),
                ('adaptivecapacity', models.CharField(max_length=1024, blank=True)),
                ('physicaltypename', models.CharField(max_length=20, blank=True)),
                ('physicaltypecode', models.IntegerField(null=True, blank=True)),
                ('adjustmethod', models.CharField(max_length=1024, blank=True)),
                ('multiplepeople', models.CharField(max_length=1024, blank=True)),
                ('physicalinterpretation', models.CharField(max_length=1024, blank=True)),
                ('physicalreason', models.CharField(max_length=1024, blank=True)),
                ('physicaladjustmethod', models.CharField(max_length=1024, blank=True)),
                ('foodallowtaboo', models.CharField(max_length=1024, blank=True)),
            ],
            options={
                'ordering': ['physiqueinfoid'],
                'db_table': 'tb_physiqueinfo',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbPicturelist',
            fields=[
                ('picturelocationid', models.AutoField(serialize=False, primary_key=True)),
                ('originalpicturepath', models.ImageField(upload_to=CNDADATA.models.get_image, blank=True)),
                ('smallpicturepath', models.CharField(max_length=1024, blank=True)),
                ('pictureclass', models.CharField(max_length=100, blank=True)),
                ('picturename', models.CharField(max_length=100, blank=True)),
                ('picturetitle', models.CharField(max_length=100, blank=True)),
                ('pictureusecode', models.BigIntegerField(null=True, blank=True)),
                ('pictureremarks', models.CharField(blank=True, max_length=500, choices=[(b'test', b'test'), (b'head', b'head'), (b'healthknowledge', b'healthknowledge'), (b'physicalinformation', b'physicalinformation'), (b'other', b'other')])),
            ],
            options={
                'ordering': ['picturelocationid'],
                'db_table': 'tb_picturelist',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbRecommendedconditionsmapp',
            fields=[
                ('recommendedconditionsmappid', models.AutoField(serialize=False, primary_key=True)),
                ('recommendmappremarks', models.CharField(max_length=1024, blank=True)),
            ],
            options={
                'ordering': ['recommendedconditionsmappid'],
                'db_table': 'tb_recommendedconditionsmapp',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbSetmealfoodmapp',
            fields=[
                ('mealfoodmapid', models.AutoField(serialize=False, primary_key=True)),
                ('mealfoodmapremarks', models.CharField(max_length=500, blank=True)),
            ],
            options={
                'ordering': ['mealfoodmapid'],
                'db_table': 'tb_setmealfoodmapp',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbSleepdetailprocessrecords',
            fields=[
                ('sleepdetailrecordsid', models.AutoField(serialize=False, primary_key=True)),
                ('sleepstatusbegintime', models.DateTimeField(null=True, blank=True)),
                ('sleepstatusovertime', models.DateTimeField(null=True, blank=True)),
                ('sleepstatusduration', models.DecimalField(null=True, max_digits=4, decimal_places=1, blank=True)),
                ('sleepstatusremarks', models.CharField(max_length=500, blank=True)),
            ],
            options={
                'ordering': ['sleepdetailrecordsid'],
                'db_table': 'tb_sleepdetailprocessrecords',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbSleepinforecords',
            fields=[
                ('sleeprecordid', models.AutoField(serialize=False, primary_key=True)),
                ('airhumidity', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('ambienttemperature', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('ambientnoise', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('sleepbegin', models.DateTimeField(null=True, blank=True)),
                ('sleepover', models.DateTimeField(null=True, blank=True)),
                ('deepsleeptime', models.DecimalField(null=True, max_digits=4, decimal_places=1, blank=True)),
                ('shallowsleeptime', models.DecimalField(null=True, max_digits=4, decimal_places=1, blank=True)),
                ('sleepremarks', models.CharField(max_length=150, blank=True)),
                ('sleeprecorduptime', models.DateTimeField(null=True, blank=True)),
                ('waketimes', models.IntegerField(null=True, blank=True)),
                ('intelligentdevicecode', models.IntegerField(null=True, blank=True)),
                ('sleepuploadflag', models.BigIntegerField(null=True, blank=True)),
                ('awaketime', models.CharField(max_length=500, blank=True)),
            ],
            options={
                'ordering': ['sleeprecordid'],
                'db_table': 'tb_sleepinforecords',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbSleeppreferrecords',
            fields=[
                ('sleeppreferid', models.AutoField(serialize=False, primary_key=True)),
                ('prefersleepbeginat', models.TimeField(null=True, blank=True)),
                ('prefersleepoverat', models.TimeField(null=True, blank=True)),
                ('sleepfeatureaddtime', models.DateTimeField(null=True, blank=True)),
                ('currentlypreferflag', models.BigIntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['sleeppreferid'],
                'db_table': 'tb_sleeppreferrecords',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbSleepstatuscategory',
            fields=[
                ('sleepstatuscategoryid', models.AutoField(serialize=False, primary_key=True)),
                ('sleepstatusname', models.CharField(max_length=20, blank=True)),
                ('sleepstatuscode', models.SmallIntegerField(null=True, blank=True)),
                ('sleepstatusexplain', models.CharField(max_length=500, blank=True)),
            ],
            options={
                'ordering': ['sleepstatuscategoryid'],
                'db_table': 'tb_sleepstatuscategory',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbSportinforecords',
            fields=[
                ('sportrecordid', models.AutoField(serialize=False, primary_key=True)),
                ('walkstepnumber', models.BigIntegerField(null=True, blank=True)),
                ('runstepnumber', models.BigIntegerField(null=True, blank=True)),
                ('walkdistance', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('rundistance', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('calorieconsumption', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('sportbegintime', models.DateTimeField(null=True, blank=True)),
                ('sportovertime', models.DateTimeField(null=True, blank=True)),
                ('sportrecorduptime', models.DateTimeField(null=True, blank=True)),
                ('sportinforemarks', models.CharField(max_length=150, blank=True)),
                ('sportanalysis', models.CharField(max_length=1024, blank=True)),
                ('sport_mode', models.CharField(max_length=100, blank=True)),
                ('intelligentdevicecode', models.IntegerField(null=True, blank=True)),
                ('uploadflag', models.BigIntegerField(null=True, blank=True)),
                ('restingcalorieconsume', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('movecalorieconsume', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('crawledfloor', models.IntegerField(null=True, blank=True)),
                ('fallitems', models.SmallIntegerField(null=True, blank=True)),
                ('activeduration', models.DecimalField(null=True, max_digits=4, decimal_places=1, blank=True)),
                ('longestactiveduration', models.DecimalField(null=True, max_digits=4, decimal_places=1, blank=True)),
                ('longestidleduration', models.DecimalField(null=True, max_digits=4, decimal_places=1, blank=True)),
            ],
            options={
                'ordering': ['sportrecordid'],
                'db_table': 'tb_sportinforecords',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbStatisticofclick',
            fields=[
                ('statisticclickid', models.AutoField(serialize=False, primary_key=True)),
                ('clickclass', models.CharField(max_length=50, blank=True)),
                ('clickitem', models.BigIntegerField(null=True, blank=True)),
                ('praiseyn', models.SmallIntegerField(null=True, blank=True)),
                ('statisticclickremarks', models.CharField(max_length=100, blank=True)),
                ('ipaddress', models.CharField(max_length=50, blank=True)),
            ],
            options={
                'ordering': ['statisticclickid'],
                'db_table': 'tb_statisticofclick',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbSupervisorylevel',
            fields=[
                ('superlevelid', models.AutoField(serialize=False, primary_key=True)),
                ('managerrank', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['superlevelid'],
                'db_table': 'tb_supervisorylevel',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbTcmdcotorsinfo',
            fields=[
                ('doctorid', models.AutoField(serialize=False, primary_key=True)),
                ('doctorname', models.CharField(max_length=20, blank=True)),
                ('doctorsex', models.CharField(max_length=5, blank=True)),
                ('doctorage', models.IntegerField(null=True, blank=True)),
                ('professionalrands', models.CharField(max_length=100, blank=True)),
                ('doctorworktime', models.IntegerField(null=True, blank=True)),
                ('doctorsynopsis', models.CharField(max_length=1024, blank=True)),
                ('researcharea', models.CharField(max_length=1024, blank=True)),
                ('researchfindings', models.CharField(max_length=1024, blank=True)),
                ('doctorcode', models.BigIntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['-doctorid'],
                'db_table': 'tb_tcmdcotorsinfo',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbTcmdiagnosisobj',
            fields=[
                ('diagnosisobjid', models.AutoField(serialize=False, primary_key=True)),
                ('diagnosisobjname', models.CharField(max_length=50, blank=True)),
                ('diagnosisobjexplain', models.CharField(max_length=1024, blank=True)),
            ],
            options={
                'ordering': ['diagnosisobjid'],
                'db_table': 'tb_tcmdiagnosisobj',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbTcmdiagnosistype',
            fields=[
                ('diagnosistypeid', models.AutoField(serialize=False, primary_key=True)),
                ('diagnosistypename', models.CharField(max_length=50, blank=True)),
                ('diagnosistypecode', models.IntegerField(null=True, blank=True)),
                ('diagnosistypeexplain', models.CharField(max_length=200, blank=True)),
            ],
            options={
                'ordering': ['diagnosistypeid'],
                'db_table': 'tb_tcmdiagnosistype',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbTcmhealthknowledge',
            fields=[
                ('healthknowledgeid', models.AutoField(serialize=False, primary_key=True)),
                ('healthknowledgetitle', models.CharField(max_length=200, blank=True)),
                ('healthknowledgecontent', models.CharField(max_length=1024, blank=True)),
                ('exersuggtime', models.DateTimeField(null=True, blank=True)),
                ('healthknowledgeremarks', models.CharField(max_length=1024, blank=True)),
                ('healthknowledgecode', models.BigIntegerField(null=True, blank=True)),
                ('healthknowledgeflag', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['healthknowledgeid'],
                'db_table': 'tb_tcmhealthknowledge',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbUseranswerrecords',
            fields=[
                ('issuescoremappid', models.AutoField(serialize=False, primary_key=True)),
                ('getscore', models.IntegerField(null=True, blank=True)),
                ('answerflag', models.BigIntegerField(null=True, blank=True)),
                ('answertime', models.DateTimeField(null=True, blank=True)),
            ],
            options={
                'ordering': ['issuescoremappid'],
                'db_table': 'tb_useranswerrecords',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbUserexercisefeature',
            fields=[
                ('exercisefeatureid', models.AutoField(serialize=False, primary_key=True)),
                ('height', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('weight', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('steplength', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('runsteplength', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('standardweight', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('datauptime', models.DateField(null=True, blank=True)),
                ('exercisefeatureremarks', models.CharField(max_length=150, blank=True)),
                ('motilityindex', models.CharField(max_length=20, blank=True)),
                ('exercisehabitsdetermine', models.CharField(max_length=500, blank=True)),
                ('exercisehabitanalysis', models.CharField(max_length=500, blank=True)),
                ('averageexcitetime', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('exercisetypeprefer', models.CharField(max_length=100, blank=True)),
            ],
            options={
                'ordering': ['exercisefeatureid'],
                'db_table': 'tb_userexercisefeature',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbUserhealthattrmapp',
            fields=[
                ('userhealthattrmappid', models.AutoField(serialize=False, primary_key=True)),
                ('expendhealthattrvalue', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('updatetime', models.DateTimeField(null=True, blank=True)),
                ('currentuseflag', models.SmallIntegerField(null=True, blank=True)),
                ('userattrmappingexplain', models.CharField(max_length=500, blank=True)),
            ],
            options={
                'ordering': ['userhealthattrmappid'],
                'db_table': 'tb_userhealthattrmapp',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbUserhealthwarningmapp',
            fields=[
                ('userhealthwarningid', models.AutoField(serialize=False, primary_key=True)),
                ('healthwarningcontent', models.CharField(max_length=1024, blank=True)),
                ('healthwarningtime', models.DateTimeField(null=True, blank=True)),
                ('healthwarningreason', models.CharField(max_length=500, blank=True)),
                ('healthwarningremarks', models.CharField(max_length=500, blank=True)),
                ('checktosee', models.SmallIntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['-healthwarningtime'],
                'db_table': 'tb_userhealthwarningmapp',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbUserknowledgemapp',
            fields=[
                ('userknowledgemappid', models.AutoField(serialize=False, primary_key=True)),
                ('healthknowledgecontent', models.CharField(max_length=1024, blank=True)),
                ('healthknowledgereason', models.CharField(max_length=500, blank=True)),
                ('healthknowledgetime', models.DateTimeField(null=True, blank=True)),
                ('healthknowledgeremarks', models.CharField(max_length=500, blank=True)),
            ],
            options={
                'ordering': ['userknowledgemappid'],
                'db_table': 'tb_userknowledgemapp',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbUserreviewstat',
            fields=[
                ('userreviewstatid', models.IntegerField(serialize=False, primary_key=True)),
                ('userreviewclass', models.CharField(max_length=50, blank=True)),
                ('userreviewitem', models.BigIntegerField(null=True, blank=True)),
                ('userreviewcontent', models.CharField(max_length=1024, blank=True)),
                ('userreviewremarks', models.CharField(max_length=500, blank=True)),
            ],
            options={
                'ordering': ['userreviewstatid'],
                'db_table': 'tb_userreviewstat',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbUsersleepfeature',
            fields=[
                ('sleepfeatureid', models.AutoField(serialize=False, primary_key=True)),
                ('airhumidity', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('ambienttemperature', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('ambientnoise', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('bedtimehabits', models.CharField(max_length=100, blank=True)),
                ('goodbedtimehabits', models.CharField(max_length=5, blank=True)),
                ('siestahabit', models.CharField(max_length=5, blank=True)),
                ('averagesleeptime', models.DecimalField(null=True, max_digits=4, decimal_places=1, blank=True)),
                ('sleephabitdetermination', models.CharField(max_length=10, blank=True)),
                ('sleepindex', models.CharField(max_length=20, blank=True)),
                ('sleephabitanalysis', models.CharField(max_length=500, blank=True)),
                ('latelymaintentime', models.DateTimeField(null=True, blank=True)),
            ],
            options={
                'ordering': ['sleepfeatureid'],
                'db_table': 'tb_usersleepfeature',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbVariousindicatorlimited',
            fields=[
                ('indicatorlimitedid', models.AutoField(serialize=False, primary_key=True)),
                ('indicatorstandardname', models.CharField(max_length=50, blank=True)),
                ('indicatorstandardstatus', models.SmallIntegerField(null=True, blank=True)),
                ('indicatorstandardcode', models.IntegerField(null=True, blank=True)),
                ('indicatorstandardvalue', models.CharField(max_length=50, blank=True)),
                ('indicatorstandardstatuslevel', models.SmallIntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['indicatorlimitedid'],
                'db_table': 'tb_variousindicatorlimited',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbVariousindicatorstandard',
            fields=[
                ('indicatorstandardid', models.AutoField(serialize=False, primary_key=True)),
                ('indicatorname', models.CharField(max_length=50, blank=True)),
                ('indicatorcode', models.IntegerField(null=True, blank=True)),
                ('indicatorstatus', models.SmallIntegerField(null=True, blank=True)),
                ('indicatorvalue', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('indicatorremarks', models.CharField(max_length=200, blank=True)),
            ],
            options={
                'ordering': ['indicatorstandardid'],
                'db_table': 'tb_variousindicatorstandard',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbWesmedicineexamitem',
            fields=[
                ('westmedicineexamid', models.AutoField(serialize=False, primary_key=True)),
                ('westmedicineitemname', models.CharField(max_length=50, blank=True)),
                ('wesmedicineitemexpl', models.CharField(max_length=1024, blank=True)),
            ],
            options={
                'ordering': ['westmedicineexamid'],
                'db_table': 'tb_wesmedicineexamitem',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbWtreatmentrecords',
            fields=[
                ('wtreatmentrecordid', models.AutoField(serialize=False, primary_key=True)),
                ('wesexamresultval', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
            ],
            options={
                'ordering': ['wtreatmentrecordid'],
                'db_table': 'tb_wtreatmentrecords',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='Userhealthknowledge',
            fields=[
                ('userknowledgemappid', models.IntegerField(serialize=False, primary_key=True)),
                ('userid', models.IntegerField(null=True, blank=True)),
                ('username', models.CharField(max_length=30, blank=True)),
                ('healthknowltypeid', models.IntegerField(null=True, blank=True)),
                ('healthknowltypename', models.CharField(max_length=50, blank=True)),
                ('healthknowledgetitle', models.CharField(max_length=200, blank=True)),
                ('healthknowledgecontent', models.CharField(max_length=1024, blank=True)),
                ('healthknowledgetime', models.DateTimeField(null=True, blank=True)),
                ('healthknowledgecode', models.IntegerField(null=True, blank=True)),
            ],
            options={
                'ordering': ['userknowledgemappid'],
                'db_table': 'userhealthknowledge',
                'managed': False,
            },
            bases=(models.Model,),
        ),
        migrations.CreateModel(
            name='TbUser',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(default=django.utils.timezone.now, verbose_name='last login')),
                ('userid', models.AutoField(serialize=False, primary_key=True)),
                ('username', models.CharField(unique=True, max_length=30, blank=True)),
                ('name', models.CharField(max_length=30, blank=True)),
                ('usersex', models.CharField(max_length=5, blank=True)),
                ('userage', models.IntegerField(null=True, blank=True)),
                ('userphonenumber', models.CharField(max_length=15, blank=True)),
                ('email', models.CharField(unique=True, max_length=50, blank=True)),
                ('userrank', models.CharField(max_length=5, blank=True)),
                ('userwroktype', models.CharField(max_length=100, blank=True)),
                ('userbmiindex', models.DecimalField(null=True, max_digits=8, decimal_places=2, blank=True)),
                ('temp_sleepfeatureid', models.IntegerField(null=True, blank=True)),
                ('temp_exercisefeatureid', models.IntegerField(null=True, blank=True)),
                ('temp_eatingfeatureid', models.IntegerField(null=True, blank=True)),
                ('is_active', models.BooleanField(default=True)),
                ('is_admin', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['userid'],
                'db_table': 'tb_user',
                'managed': False,
            },
            bases=(models.Model,),
        ),
    ]
